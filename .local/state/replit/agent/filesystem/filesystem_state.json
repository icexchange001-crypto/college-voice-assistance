{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Real-Time College Voice Assistant\n\n## Overview\n\nThis is a web-based bilingual voice assistant designed specifically for RKSD College. The application provides real-time responses to college-related queries through both voice and text interfaces, supporting Hindi and English languages. Built with modern web technologies, it features a clean, professional interface optimized for both desktop and mobile devices with hosting-ready architecture.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern component-based frontend using React 18 with TypeScript for type safety\n- **UI Framework**: Shadcn/UI components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Voice Integration**: \n  - Web Speech API for Speech-to-Text (STT) functionality\n  - Three-tier Text-to-Speech (TTS) system:\n    1. Cartesia API (primary) - Ultra-low latency with speed and emotion controls\n    2. ElevenLabs API (fallback) - High-quality neural voice synthesis\n    3. Browser SpeechSynthesis API (final fallback) - Native browser TTS support\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Node.js + Express**: RESTful API server built with Express.js\n- **Database Layer**: \n  - Drizzle ORM for type-safe database operations\n  - PostgreSQL as the primary database (configured for Neon serverless)\n  - In-memory storage fallback for development/testing\n- **API Design**: RESTful endpoints for chat messages, AI responses, and college information management\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with three main entities:\n  - `users`: User authentication and management\n  - `chat_messages`: Conversation history with role-based messages (user/assistant)\n  - `college_info`: Categorized college information with metadata support\n- **Schema Management**: Drizzle Kit for database migrations and schema versioning\n- **Data Categories**: Organized college information by categories (hostel, departments, contacts, events)\n\n### Authentication and Authorization\n- **Session-based Authentication**: Express sessions with PostgreSQL session store\n- **User Management**: Basic user registration and login system\n- **Security**: Environment-based configuration for database credentials\n\n### AI Integration\n- **Groq API**: Integration configured for conversational AI responses using llama3-8b-8192 model\n- **Context-Aware Responses**: College information is injected as context for relevant, personalized responses\n- **Bilingual Support**: System prompts designed to handle both Hindi and English naturally\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL driver for Neon database\n- **drizzle-orm** & **drizzle-kit**: Type-safe ORM and migration tools\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library\n\n### UI Component Libraries\n- **@radix-ui/***: Comprehensive set of accessible UI primitives (accordion, dialog, dropdown, etc.)\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Dynamic class name generation\n- **lucide-react**: Icon library\n\n### Text-to-Speech APIs (Three-tier System)\n- **Cartesia API**: Primary TTS provider with ultra-low latency (<90ms), speed controls, emotion controls, and 15 language support\n- **ElevenLabs API**: Fallback TTS provider with high-quality neural voice synthesis and multilingual support\n- **Web Speech API**: Browser-native speech recognition (no external dependency)\n- **SpeechSynthesis API**: Final fallback browser-native text-to-speech\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type checking and enhanced development experience\n- **ESBuild**: Fast bundling for production builds\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n\n### Planned Integrations\n- **Groq API**: For AI-powered conversational responses (configuration ready)\n- **Vercel**: Deployment platform (frontend)\n- **Render**: Backend hosting platform","size_bytes":4385},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"rksd-blue\": \"var(--rksd-blue)\",\n        \"rksd-light\": \"var(--rksd-light)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2903},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import { config } from 'dotenv';\nimport path from 'path';\nconfig({ path: path.resolve(process.cwd(), '.env'), override: true });\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2195},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertChatMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { applyPronunciationCorrections } from \"./pronunciation-corrections\";\n\nconst askSchema = z.object({\n  message: z.string().min(1),\n  language: z.string().optional(),\n});\n\nconst ttsSchema = z.object({\n  text: z.string().min(1),\n  voiceId: z.string(),\n  // ElevenLabs parameters\n  modelId: z.string().optional(),\n  stability: z.number().optional(),\n  similarityBoost: z.number().optional(),\n  // Cartesia parameters\n  cartesiaModelId: z.string().optional(),\n  speed: z.union([z.enum([\"slowest\", \"slow\", \"normal\", \"fast\", \"fastest\"]), z.number().min(-1).max(1)]).optional(),\n  emotions: z.array(z.string()).optional(),\n  language: z.enum([\"en\", \"fr\", \"de\", \"es\", \"pt\", \"zh\", \"ja\", \"hi\", \"it\", \"ko\", \"nl\", \"pl\", \"ru\", \"sv\", \"tr\"]).optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Get chat messages\n  app.get(\"/api/messages\", async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Ask AI assistant\n  app.post(\"/api/ask\", async (req, res) => {\n    try {\n      const { message, language } = askSchema.parse(req.body);\n      \n      // Store user message\n      await storage.createChatMessage({\n        content: message,\n        role: \"user\",\n        language: language || \"en\",\n      });\n\n      // Get college context\n      const collegeData = await storage.getCollegeInfo();\n      const context = collegeData.map(info => `${info.title}: ${info.content}`).join('\\n');\n      \n      // Prepare system prompt\n      const systemPrompt = `You are RK, the official AI Assistant of RKSD College.  \nYour role is to act like a polite, professional staff member who guides students, parents, and staff naturally in conversation.  \n\nCollege Information:\n${context}\n\nInstructions:\n1. Always reply in natural Hinglish (a real mix of Hindi + English, the way people casually speak).  \n2. Speak politely and confidently, like a real staff member of RKSD College.  \n3. Responses should be short, clear, and meaningful — never robotic or confusing.  \n4. Use emojis where helpful (👋, 🎓, 📚, 🚌, 📞, ⏰), but keep them balanced.  \n5. Never repeat the same line in Hindi and English. Choose one language naturally.  \n6. Never use brackets, parentheses, or awkward phrases.  \n7. Always use natural correct words (✅ \"mera\", \"aapka\", \"tumhara\"; ❌ \"mujhka\", \"tumhka\").  \n8. Avoid meaningless or robotic lines (❌ \"Are you related to college?\").  \n9. If the user’s question is unclear, ask a smart follow-up (✅ \"Kya aap admission process ke baare me puch rahe ho?\").  \n10. If you don’t know something, admit it politely and guide them to the college office or official website.  \n\nStyle Examples:  \n- User: Namaste  \n- RK: Namaste! 👋 Main RK, RKSD College ka assistant hoon. Aap kaise hain?  \n\n- User: College me bus pass kaha se milega?  \n- RK: Bus pass ke liye aapko transport cell jaana hoga 🚌. Wahan form milega aur ID proof + admit card dena hoga. Form submit karte hi aapko bus pass mil jayega.  \n\n- User: Aapka naam kya hai?  \n- RK: Mera naam RK hai 🎓. Main RKSD College ka official assistant hoon, jo students aur staff ki madad ke liye banaya gaya hai.`;\n\n      // Call Groq API with proper error handling\n      const groqApiKey = process.env.GROQ_API_KEY;\n      \n      if (!groqApiKey) {\n        console.warn('GROQ_API_KEY not found in environment variables');\n      }\n      \n      let assistantResponse = \"Hello! I'm your RKSD Assistant. How can I help you today?\";\n      \n      try {\n        const groqResponse = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${groqApiKey}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            messages: [\n              { role: 'system', content: systemPrompt },\n              { role: 'user', content: message }\n            ],\n            model: 'llama-3.3-70b-versatile',\n            max_tokens: 500,\n            temperature: 0.7,\n          }),\n        });\n\n        if (groqResponse.ok) {\n          const groqData = await groqResponse.json();\n          assistantResponse = groqData.choices[0]?.message?.content || assistantResponse;\n        } else {\n          const errorText = await groqResponse.text();\n          console.warn('Groq API unavailable:', groqResponse.status, errorText);\n          // Use intelligent fallback based on message content\n          if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi') || message.toLowerCase().includes('hlo')) {\n            assistantResponse = \"Hello! I'm your RKSD Assistant. How can I help you with college information today?\";\n          } else if (message.toLowerCase().includes('hostel')) {\n            assistantResponse = \"For hostel-related queries, please contact the hostel office during working hours. I can help you with general college information.\";\n          } else if (message.toLowerCase().includes('admission')) {\n            assistantResponse = \"For admission inquiries, please visit the RKSD College admission office or check our official website for the latest information.\";\n          } else {\n            assistantResponse = `Thank you for your question about \"${message}\". I'm here to help with RKSD College information. Could you please be more specific about what you'd like to know?`;\n          }\n        }\n      } catch (apiError) {\n        console.warn('Groq API error, using fallback:', apiError);\n        // Keep the fallback response\n      }\n\n      // Store assistant response\n      const savedResponse = await storage.createChatMessage({\n        content: assistantResponse,\n        role: \"assistant\",\n        language: language || \"en\",\n      });\n\n      res.json({ \n        response: assistantResponse,\n        messageId: savedResponse.id \n      });\n\n    } catch (error) {\n      console.error(\"Error in ask endpoint:\", error);\n      \n      // Still try to provide a helpful response even if there's an error\n      try {\n        const fallbackResponse = await storage.createChatMessage({\n          content: \"I'm experiencing some technical difficulties, but I'm here to help! Please try asking your question again, or contact RKSD College directly for urgent inquiries.\",\n          role: \"assistant\",\n          language: \"en\",\n        });\n        \n        res.json({ \n          response: fallbackResponse.content,\n          messageId: fallbackResponse.id \n        });\n      } catch (fallbackError) {\n        console.error(\"Fallback also failed:\", fallbackError);\n        res.status(500).json({ message: \"Service temporarily unavailable. Please try again later.\" });\n      }\n    }\n  });\n\n  // Text-to-Speech with three-tier fallback system\n  app.post(\"/api/tts\", async (req, res) => {\n    try {\n      const { text, voiceId, modelId, stability, similarityBoost, cartesiaModelId, speed, emotions, language } = ttsSchema.parse(req.body);\n      \n      // Validate text length\n      if (!text || text.trim().length === 0) {\n        return res.status(400).json({ \n          message: \"Text cannot be empty\",\n          error: \"EMPTY_TEXT\"\n        });\n      }\n\n      // Clean text for speech synthesis - remove markdown formatting and extra characters\n      const cleanTextForSpeech = (text: string) => {\n        return text\n          .replace(/\\|/g, ' ') // Remove table pipes\n          .replace(/---+/g, ' ') // Remove horizontal rules\n          .replace(/#{1,6}\\s+/g, '') // Remove markdown headers\n          .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold formatting\n          .replace(/\\*(.*?)\\*/g, '$1') // Remove italic formatting\n          .replace(/`(.*?)`/g, '$1') // Remove code formatting\n          .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove links, keep text\n          .replace(/📊|📌|🎓|⏰|📞/g, '') // Remove specific emojis that cause issues\n          .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n          .trim();\n      };\n\n      // Detect language for better pronunciation\n      const detectLanguage = (text: string): 'hi' | 'en' => {\n        const hindiWords = ['aap', 'hai', 'hain', 'kya', 'kaise', 'kahan', 'namaste', 'dhanyawad', 'main', 'hum', 'kar', 'karo', 'karna', 'kiya', 'ghar', 'paani', 'khana', 'college', 'student', 'teacher', 'library', 'hostel', 'fees', 'exam', 'result', 'madad', 'help', 'problem', 'achha', 'bura', 'naya', 'purana', 'bada', 'chota', 'se', 'ko', 'ke', 'ki', 'ka', 'me', 'mein', 'par', 'pe', 'tak', 'aur', 'ya', 'lekin', 'agar', 'to', 'phir', 'fir', 'kyun', 'kyon', 'kab', 'kon', 'kaun', 'kitna', 'kitni', 'kitne'];\n        \n        const lowerText = text.toLowerCase();\n        const hindiWordCount = hindiWords.filter(word => lowerText.includes(word)).length;\n        const totalWords = text.split(/\\s+/).length;\n        \n        // If more than 20% of recognizable words are Hindi, treat as Hindi\n        return hindiWordCount / totalWords > 0.2 ? 'hi' : 'en';\n      };\n\n      const cleanedText = cleanTextForSpeech(text);\n      const correctedText = applyPronunciationCorrections(cleanedText);\n      const limitedText = correctedText.substring(0, 1500); // Increased limit for complete message\n      \n      const detectedLanguage = detectLanguage(limitedText);\n      console.log('TTS: Attempting three-tier synthesis for text:', limitedText.substring(0, 50) + '...');\n      console.log('TTS: Text length:', limitedText.length);\n      console.log('TTS: Detected language:', detectedLanguage);\n      \n      // Log pronunciation corrections if text was modified\n      if (cleanedText !== correctedText) {\n        console.log('TTS: Applied pronunciation corrections');\n      }\n\n      // First try Cartesia API\n      const cartesiaApiKey = process.env.CARTESIA_API_KEY;\n      if (cartesiaApiKey && cartesiaApiKey !== 'your_cartesia_api_key_here') {\n        try {\n          console.log('TTS: Attempting Cartesia API...');\n          \n          // Map ElevenLabs voice ID to Cartesia voice ID\n          const cartesiaVoiceMapping = {\n            \"iWNf11sz1GrUE4ppxTOL\": \"be79f378-47fe-4f9c-b92b-f02cefa62ccf\", // User specified voice\n          };\n          \n          const cartesiaVoiceId = cartesiaVoiceMapping[voiceId as keyof typeof cartesiaVoiceMapping] || \"be79f378-47fe-4f9c-b92b-f02cefa62ccf\";\n          \n          // Use correct emotion format and slower speed for better pronunciation\n          const defaultEmotions = emotions && emotions.length > 0 ? emotions : [\"positivity\"];\n          \n          // Prepare Cartesia request body with latest model and detected language\n          const cartesiaRequestBody = {\n            model_id: cartesiaModelId || \"sonic-multilingual\", // Latest multilingual model for better Hindi-English handling\n            transcript: limitedText,\n            voice: {\n              mode: \"id\",\n              id: cartesiaVoiceId,\n              __experimental_controls: {\n                speed: speed || \"normal\", // Slower speed for better pronunciation\n                emotion: defaultEmotions\n              }\n            },\n            output_format: {\n              container: \"wav\",\n              encoding: \"pcm_s16le\",\n              sample_rate: 44100\n            },\n            language: detectedLanguage // Dynamic language detection for better pronunciation\n          };\n\n          const cartesiaResponse = await fetch('https://api.cartesia.ai/tts/bytes', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${cartesiaApiKey}`,\n              'Cartesia-Version': '2025-04-16',\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(cartesiaRequestBody)\n          });\n\n          if (cartesiaResponse.ok) {\n            const audioBuffer = await cartesiaResponse.arrayBuffer();\n            console.log('TTS: Cartesia success! Audio size:', audioBuffer.byteLength, 'bytes');\n            \n            res.set({\n              'Content-Type': 'audio/wav',\n              'Content-Length': audioBuffer.byteLength.toString(),\n              'X-TTS-Provider': 'cartesia'\n            });\n            return res.send(Buffer.from(audioBuffer));\n          } else {\n            const errorText = await cartesiaResponse.text();\n            console.warn('TTS: Cartesia failed with status:', cartesiaResponse.status, errorText);\n          }\n        } catch (cartesiaError) {\n          console.warn('TTS: Cartesia error:', cartesiaError);\n        }\n      } else {\n        console.log('TTS: Cartesia API key not configured, skipping...');\n      }\n\n      // Second, try ElevenLabs API\n      const elevenlabsApiKey = process.env.ELEVENLABS_API_KEY;\n      if (elevenlabsApiKey && elevenlabsApiKey !== 'your_elevenlabs_api_key_here') {\n        try {\n          console.log('TTS: Attempting ElevenLabs API...');\n          \n          const elevenlabsRequestBody = {\n            text: limitedText,\n            model_id: modelId || \"eleven_multilingual_v2\",\n            voice_settings: {\n              stability: stability || 0.6,\n              similarity_boost: similarityBoost || 0.8\n            }\n          };\n\n          const elevenlabsResponse = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {\n            method: 'POST',\n            headers: {\n              'Accept': 'audio/mpeg',\n              'Content-Type': 'application/json',\n              'xi-api-key': elevenlabsApiKey\n            },\n            body: JSON.stringify(elevenlabsRequestBody)\n          });\n\n          if (elevenlabsResponse.ok) {\n            const audioBuffer = await elevenlabsResponse.arrayBuffer();\n            console.log('TTS: ElevenLabs success! Audio size:', audioBuffer.byteLength, 'bytes');\n            \n            res.set({\n              'Content-Type': 'audio/mpeg',\n              'Content-Length': audioBuffer.byteLength.toString(),\n              'X-TTS-Provider': 'elevenlabs'\n            });\n            return res.send(Buffer.from(audioBuffer));\n          } else {\n            const errorText = await elevenlabsResponse.text();\n            console.warn('TTS: ElevenLabs failed with status:', elevenlabsResponse.status, errorText);\n          }\n        } catch (elevenlabsError) {\n          console.warn('TTS: ElevenLabs error:', elevenlabsError);\n        }\n      } else {\n        console.log('TTS: ElevenLabs API key not configured, skipping...');\n      }\n\n      // Both API providers failed - return error without browser fallback\n      console.error('TTS: Both Cartesia and ElevenLabs failed');\n      return res.status(503).json({ \n        message: \"Speech synthesis unavailable - please check API configuration\",\n        error: \"ALL_TTS_PROVIDERS_FAILED\"\n      });\n\n    } catch (error) {\n      console.error(\"Error in TTS endpoint:\", error);\n      res.status(500).json({ \n        message: \"Internal server error during speech generation\",\n        error: \"SERVER_ERROR\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Get college information\n  app.get(\"/api/college-info\", async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      let collegeInfo;\n      if (search) {\n        collegeInfo = await storage.searchCollegeInfo(search as string);\n      } else if (category) {\n        collegeInfo = await storage.getCollegeInfoByCategory(category as string);\n      } else {\n        collegeInfo = await storage.getCollegeInfo();\n      }\n      \n      res.json(collegeInfo);\n    } catch (error) {\n      console.error(\"Error fetching college info:\", error);\n      res.status(500).json({ message: \"Failed to fetch college information\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16074},"server/storage.ts":{"content":"import { type User, type InsertUser, type ChatMessage, type InsertChatMessage, type CollegeInfo, type InsertCollegeInfo } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chat messages\n  getChatMessages(limit?: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // College information\n  getCollegeInfo(): Promise<CollegeInfo[]>;\n  getCollegeInfoByCategory(category: string): Promise<CollegeInfo[]>;\n  createCollegeInfo(info: InsertCollegeInfo): Promise<CollegeInfo>;\n  searchCollegeInfo(query: string): Promise<CollegeInfo[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private chatMessages: ChatMessage[];\n  private collegeInfo: CollegeInfo[];\n\n  constructor() {\n    this.users = new Map();\n    this.chatMessages = [];\n    this.collegeInfo = [];\n    this.initializeCollegeData();\n  }\n\n  private initializeCollegeData() {\n    const defaultData: Omit<CollegeInfo, 'id'>[] = [\n      {\n        category: 'hostel',\n        title: 'Hostel Timings',\n        content: 'Boys hostel timing is 10:00 PM and girls hostel timing is 9:30 PM. Late entry requires prior permission from the warden.',\n        metadata: JSON.stringify({ boys_timing: '22:00', girls_timing: '21:30' })\n      },\n      {\n        category: 'department',\n        title: 'Computer Science Department',\n        content: 'The Computer Science Department offers B.Tech, M.Tech, and PhD programs. Faculty includes experienced professors in AI, ML, and software engineering.',\n        metadata: JSON.stringify({ programs: ['B.Tech', 'M.Tech', 'PhD'], specializations: ['AI', 'ML', 'Software Engineering'] })\n      },\n      {\n        category: 'contact',\n        title: 'Main Office Contact',\n        content: 'RKSD College Main Office - Phone: +91-XXX-XXXXXXX, Email: info@rksd.edu.in, Address: RKSD College Campus, City',\n        metadata: JSON.stringify({ phone: '+91-XXX-XXXXXXX', email: 'info@rksd.edu.in' })\n      },\n      {\n        category: 'events',\n        title: 'Annual Tech Fest',\n        content: 'Annual Tech Fest \"Technova\" is organized every March featuring coding competitions, robotics, and cultural events.',\n        metadata: JSON.stringify({ event_name: 'Technova', month: 'March', activities: ['coding', 'robotics', 'cultural'] })\n      },\n      {\n        category: 'admission',\n        title: 'Admission Process',\n        content: 'Admissions are based on entrance exam scores. Application forms available online from May to July. Merit list published in August.',\n        metadata: JSON.stringify({ application_period: 'May-July', result_month: 'August' })\n      }\n    ];\n\n    defaultData.forEach(data => {\n      const id = randomUUID();\n      this.collegeInfo.push({ ...data, id });\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getChatMessages(limit = 50): Promise<ChatMessage[]> {\n    return this.chatMessages\n      .sort((a, b) => new Date(b.timestamp!).getTime() - new Date(a.timestamp!).getTime())\n      .slice(0, limit)\n      .reverse();\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const chatMessage: ChatMessage = {\n      ...message,\n      id,\n      timestamp: new Date(),\n    };\n    this.chatMessages.push(chatMessage);\n    return chatMessage;\n  }\n\n  async getCollegeInfo(): Promise<CollegeInfo[]> {\n    return this.collegeInfo;\n  }\n\n  async getCollegeInfoByCategory(category: string): Promise<CollegeInfo[]> {\n    return this.collegeInfo.filter(info => info.category === category);\n  }\n\n  async createCollegeInfo(info: InsertCollegeInfo): Promise<CollegeInfo> {\n    const id = randomUUID();\n    const collegeInfo: CollegeInfo = { ...info, id };\n    this.collegeInfo.push(collegeInfo);\n    return collegeInfo;\n  }\n\n  async searchCollegeInfo(query: string): Promise<CollegeInfo[]> {\n    const searchTerm = query.toLowerCase();\n    return this.collegeInfo.filter(info => \n      info.title.toLowerCase().includes(searchTerm) ||\n      info.content.toLowerCase().includes(searchTerm) ||\n      info.category.toLowerCase().includes(searchTerm)\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4798},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  language: text(\"language\"), // 'en' or 'hi'\n});\n\nexport const collegeInfo = pgTable(\"college_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(), // 'hostel', 'department', 'contact', etc.\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  metadata: text(\"metadata\"), // JSON string for additional data\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertCollegeInfoSchema = createInsertSchema(collegeInfo).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type CollegeInfo = typeof collegeInfo.$inferSelect;\nexport type InsertCollegeInfo = z.infer<typeof insertCollegeInfoSchema>;\n","size_bytes":1740},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route>\n        <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">404 - Page Not Found</h1>\n            <p className=\"text-gray-600\">The page you're looking for doesn't exist.</p>\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":991},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Voice Assistant Colors - Enhanced Theme */\n  --mint-bg: hsl(220 60% 99%);\n  --mint-from: hsl(220 60% 96%);\n  --mint-to: hsl(240 60% 98%);\n  --teal-primary: hsl(166 92% 51%);\n  --teal-secondary: hsl(178 89% 62%);\n  --slate-text: hsl(220 20% 8%);\n  --slate-muted: hsl(215 20% 44%);\n  \n  /* RKSD College Custom Colors */\n  --rksd-blue: hsl(234 89% 52%);\n  --rksd-light: hsl(234 89% 62%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  \n  /* RKSD College Custom Colors for Dark Mode */\n  --rksd-blue: hsl(234 89% 58%);\n  --rksd-light: hsl(234 89% 68%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-inter antialiased;\n    background: linear-gradient(135deg, hsl(220 60% 99%) 0%, hsl(230 60% 97%) 30%, hsl(240 60% 98%) 70%, hsl(250 60% 99%) 100%);\n    min-height: 100vh;\n    overflow-x: hidden;\n  }\n  \n  .gradient-background {\n    background: linear-gradient(135deg, \n      hsl(259 100% 85%) 0%, \n      hsl(243 100% 85%) 30%, \n      hsl(310 100% 90%) 70%, \n      hsl(289 100% 92%) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .gradient-background::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n      radial-gradient(circle at 20% 20%, hsla(259, 100%, 90%, 0.4) 0%, transparent 50%),\n      radial-gradient(circle at 80% 80%, hsla(310, 100%, 90%, 0.4) 0%, transparent 50%),\n      radial-gradient(circle at 40% 60%, hsla(243, 100%, 90%, 0.3) 0%, transparent 50%);\n    pointer-events: none;\n  }\n}\n\n@layer utilities {\n  .bg-rksd-blue {\n    background-color: var(--rksd-blue);\n  }\n  \n  .bg-rksd-light {\n    background-color: var(--rksd-light);\n  }\n  \n  .text-rksd-blue {\n    color: var(--rksd-blue);\n  }\n  \n  .text-rksd-light {\n    color: var(--rksd-light);\n  }\n  \n  .border-rksd-blue {\n    border-color: var(--rksd-blue);\n  }\n  \n  .hover\\:bg-rksd-blue:hover {\n    background-color: var(--rksd-blue);\n  }\n  \n  .hover\\:text-rksd-blue:hover {\n    color: var(--rksd-blue);\n  }\n  \n  .phone-mockup {\n    background: rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n  }\n  \n  .glass-card {\n    background: rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(255, 255, 255, 0.4);\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Voice Assistant Specific Styles */\n  .va-card {\n    background: rgba(255, 255, 255, 0.8);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border-radius: 16px;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n  }\n  \n  .va-card:hover {\n    background: rgba(255, 255, 255, 0.95);\n    transform: translateY(-3px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n  }\n  \n  .va-response-card {\n    background: rgba(255, 255, 255, 0.4);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(255, 255, 255, 0.5);\n    border-radius: 20px;\n    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);\n  }\n  \n  .va-blob {\n    background: linear-gradient(45deg, var(--teal-primary), var(--teal-secondary));\n    border-radius: 50%;\n    filter: blur(8px);\n    opacity: 0.6;\n  }\n  \n  .face-animated {\n    transition: all 0.3s ease-in-out;\n  }\n  \n  .face-listening {\n    animation: pulse 2s infinite;\n  }\n  \n  .face-speaking {\n    animation: speak 0.8s ease-in-out infinite;\n  }\n  \n  .face-typing {\n    animation: bounce 1s ease-in-out infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n  }\n  \n  @keyframes speak {\n    0%, 100% { transform: scale(1) rotate(0deg); }\n    25% { transform: scale(1.02) rotate(-1deg); }\n    75% { transform: scale(1.02) rotate(1deg); }\n  }\n  \n  @keyframes bounce {\n    0%, 100% { transform: translateY(0); }\n    50% { transform: translateY(-4px); }\n  }\n  \n  .quick-action {\n    background: rgba(255, 255, 255, 0.8);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    transition: all 0.2s ease;\n  }\n  \n  .quick-action:hover {\n    background: rgba(255, 255, 255, 0.95);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n  }\n\n  /* Message Animation */\n  @keyframes slideInMessage {\n    from {\n      opacity: 0;\n      transform: translateY(15px) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  /* Voice Assistant Orb Animations */\n  @keyframes wave {\n    0%, 100% { \n      transform: rotate(0deg) scale(1); \n      filter: hue-rotate(0deg);\n    }\n    25% { \n      transform: rotate(2deg) scale(1.02); \n      filter: hue-rotate(15deg);\n    }\n    50% { \n      transform: rotate(5deg) scale(1.05); \n      filter: hue-rotate(30deg);\n    }\n    75% { \n      transform: rotate(2deg) scale(1.02); \n      filter: hue-rotate(15deg);\n    }\n  }\n  \n  @keyframes ripple {\n    0% { \n      transform: scale(0.8); \n      opacity: 1; \n    }\n    100% { \n      transform: scale(1.4); \n      opacity: 0; \n    }\n  }\n\n  @keyframes rotate {\n    0% { \n      transform: rotate(15deg) scale(1.2); \n    }\n    100% { \n      transform: rotate(375deg) scale(1.2); \n    }\n  }\n}\n","size_bytes":10216},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/animated-face.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface AnimatedFaceProps {\n  state: 'idle' | 'listening' | 'speaking' | 'typing';\n  size?: number;\n  emotion?: 'neutral' | 'happy' | 'worried' | 'thinking';\n}\n\nexport function AnimatedFace({ state, size = 120, emotion = 'neutral' }: AnimatedFaceProps) {\n  const [expression, setExpression] = useState(emotion);\n  const [eyeBlink, setEyeBlink] = useState(false);\n  const [mouthAnimation, setMouthAnimation] = useState(false);\n\n  // Update expression when emotion prop changes\n  useEffect(() => {\n    setExpression(emotion);\n  }, [emotion]);\n\n  // Blinking animation\n  useEffect(() => {\n    const blinkInterval = setInterval(() => {\n      setEyeBlink(true);\n      setTimeout(() => setEyeBlink(false), 150);\n    }, 3000 + Math.random() * 2000);\n\n    return () => clearInterval(blinkInterval);\n  }, []);\n\n  // State-based animations\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (state === 'listening') {\n      setExpression('thinking');\n    } else if (state === 'speaking') {\n      setExpression('happy');\n      interval = setInterval(() => {\n        setMouthAnimation(prev => !prev);\n      }, 200);\n    } else if (state === 'typing') {\n      setExpression('thinking');\n    } else {\n      setExpression(emotion);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n      setMouthAnimation(false);\n    };\n  }, [state, emotion]);\n\n  // Expression-based features\n  const getEyeShape = () => {\n    if (eyeBlink) return { scaleY: 0.1 };\n    \n    switch (expression) {\n      case 'happy':\n        return { scaleY: 0.8, transform: 'rotate(-10deg)' };\n      case 'worried':\n        return { scaleY: 1.2, transform: 'rotate(15deg)' };\n      case 'thinking':\n        return { scaleY: 0.9, transform: 'rotate(5deg)' };\n      default:\n        return { scaleY: 1 };\n    }\n  };\n\n  const getMouthShape = () => {\n    if (state === 'speaking' && mouthAnimation) {\n      return {\n        width: '14px',\n        height: '10px',\n        borderRadius: '50%',\n        backgroundColor: '#2d1b69'\n      };\n    }\n\n    switch (expression) {\n      case 'happy':\n        return {\n          width: '16px',\n          height: '8px',\n          borderRadius: '0 0 16px 16px',\n          backgroundColor: '#2d1b69'\n        };\n      case 'worried':\n        return {\n          width: '12px',\n          height: '6px',\n          borderRadius: '12px 12px 0 0',\n          backgroundColor: '#2d1b69'\n        };\n      case 'thinking':\n        return {\n          width: '8px',\n          height: '4px',\n          borderRadius: '4px',\n          backgroundColor: '#2d1b69'\n        };\n      default:\n        return {\n          width: '10px',\n          height: '4px',\n          borderRadius: '2px',\n          backgroundColor: '#2d1b69'\n        };\n    }\n  };\n\n  const getEyebrowPosition = () => {\n    switch (expression) {\n      case 'worried':\n        return { transform: 'rotate(10deg) translateY(2px)' };\n      case 'thinking':\n        return { transform: 'rotate(-5deg) translateY(-1px)' };\n      default:\n        return {};\n    }\n  };\n\n  const getFaceAnimation = () => {\n    switch (state) {\n      case 'listening':\n        return 'pulse 2s infinite';\n      case 'speaking':\n        return 'speak 0.5s infinite';\n      case 'typing':\n        return 'bounce 1s infinite';\n      default:\n        return expression === 'happy' ? 'breathe 3s infinite' : 'breathe 4s infinite';\n    }\n  };\n\n  const getFaceColor = () => {\n    switch (expression) {\n      case 'happy':\n        return '#fef3c7'; // Light yellow\n      case 'worried':\n        return '#fecaca'; // Light red\n      case 'thinking':\n        return '#ddd6fe'; // Light purple\n      default:\n        return '#f3f4f6'; // Light gray\n    }\n  };\n\n  return (\n    <div \n      className=\"relative flex items-center justify-center\"\n      style={{ width: size, height: size }}\n    >\n      {/* Outer glow effect based on state */}\n      <div \n        className=\"absolute inset-0 rounded-full\"\n        style={{\n          background: state === 'listening' ? \n            'radial-gradient(circle, rgba(147, 51, 234, 0.3) 0%, transparent 70%)' :\n            state === 'speaking' ?\n            'radial-gradient(circle, rgba(34, 197, 94, 0.3) 0%, transparent 70%)' :\n            'transparent',\n          animation: state === 'listening' ? 'pulse 1.5s infinite' : 'none'\n        }}\n      />\n      \n      {/* Face */}\n      <div\n        className=\"relative rounded-full border-4 border-white shadow-lg transition-all duration-300\"\n        style={{\n          width: size * 0.8,\n          height: size * 0.8,\n          backgroundColor: getFaceColor(),\n          animation: getFaceAnimation(),\n          borderColor: state === 'listening' ? '#8b5cf6' : \n                      state === 'speaking' ? '#22c55e' : '#e5e7eb'\n        }}\n      >\n        {/* Eyes */}\n        <div className=\"absolute top-1/3 left-1/4 transform -translate-x-1/2 -translate-y-1/2\">\n          <div\n            className=\"bg-gray-800 rounded-full transition-all duration-200\"\n            style={{\n              width: '8px',\n              height: '8px',\n              ...getEyeShape()\n            }}\n          />\n        </div>\n        <div className=\"absolute top-1/3 right-1/4 transform translate-x-1/2 -translate-y-1/2\">\n          <div\n            className=\"bg-gray-800 rounded-full transition-all duration-200\"\n            style={{\n              width: '8px',\n              height: '8px',\n              ...getEyeShape()\n            }}\n          />\n        </div>\n\n        {/* Eyebrows */}\n        <div \n          className=\"absolute top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-300\"\n          style={getEyebrowPosition()}\n        >\n          <div\n            className=\"bg-gray-700 rounded\"\n            style={{ width: '12px', height: '2px' }}\n          />\n        </div>\n        <div \n          className=\"absolute top-1/4 right-1/4 transform translate-x-1/2 -translate-y-1/2 transition-all duration-300\"\n          style={getEyebrowPosition()}\n        >\n          <div\n            className=\"bg-gray-700 rounded\"\n            style={{ width: '12px', height: '2px' }}\n          />\n        </div>\n\n        {/* Nose */}\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n          <div\n            className=\"bg-gray-400 rounded\"\n            style={{ width: '3px', height: '4px' }}\n          />\n        </div>\n\n        {/* Mouth */}\n        <div className=\"absolute bottom-1/3 left-1/2 transform -translate-x-1/2 translate-y-1/2\">\n          <div\n            className=\"transition-all duration-200\"\n            style={getMouthShape()}\n          />\n        </div>\n\n        {/* Cheeks for happy expression */}\n        {expression === 'happy' && (\n          <>\n            <div \n              className=\"absolute top-1/2 left-3 transform -translate-y-1/2 bg-pink-300 rounded-full opacity-60\"\n              style={{ width: '12px', height: '8px' }}\n            />\n            <div \n              className=\"absolute top-1/2 right-3 transform -translate-y-1/2 bg-pink-300 rounded-full opacity-60\"\n              style={{ width: '12px', height: '8px' }}\n            />\n          </>\n        )}\n      </div>\n\n      {/* State indicator */}\n      <div className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2\">\n        <div \n          className={`w-2 h-2 rounded-full ${\n            state === 'listening' ? 'bg-purple-500 animate-pulse' :\n            state === 'speaking' ? 'bg-green-500 animate-bounce' :\n            state === 'typing' ? 'bg-blue-500 animate-ping' :\n            'bg-gray-400'\n          }`}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":7679},"client/src/components/chat-container.tsx":{"content":"import { ChatMessage } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bot, User, Play, Volume2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatContainerProps {\n  messages: ChatMessage[];\n  isLoading: boolean;\n  onPlayMessage: (text: string) => void;\n  currentlySpeaking: boolean;\n}\n\nexport function ChatContainer({ messages, isLoading, onPlayMessage, currentlySpeaking }: ChatContainerProps) {\n  const formatTime = (timestamp: Date | string | null) => {\n    if (!timestamp) return \"\";\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const formatMessage = (message: string) => {\n    const lines = message.split('\\n');\n    \n    return lines.map((line, index) => {\n      // Handle horizontal rules\n      if (line.trim() === '---') {\n        return <hr key={index} className=\"my-3 border-gray-200\" />;\n      }\n      \n      // Regular lines with emojis preserved\n      if (line.trim()) {\n        return (\n          <div key={index} className=\"my-1\">\n            {line}\n          </div>\n        );\n      }\n      \n      return <br key={index} />;\n    });\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <div className=\"p-4 border-b border-gray-100\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">Chat History</h2>\n        <p className=\"text-sm text-gray-600\">Ask me about college information, events, contacts, and more</p>\n      </div>\n      \n      <div className=\"h-[500px] overflow-y-auto p-4 space-y-0\">\n        {/* Welcome Message */}\n        {messages.length === 0 && !isLoading && (\n          <div className=\"flex items-start space-x-3 mb-6\">\n            <div className=\"w-8 h-8 bg-rksd-blue rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n              <Bot className=\"text-white\" size={16} />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"bg-transparent px-0 py-2\">\n                <div className=\"text-sm text-gray-900 leading-relaxed\">\n                  Hello! I'm your RKSD College assistant. Ask me about admissions, departments, events, \n                  hostel timings, or any other college information. You can speak or type your questions.\n                </div>\n              </div>\n              <div className=\"flex items-center mt-3 space-x-3\">\n                <span className=\"text-xs text-gray-500\">Just now</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-gray-400 hover:text-rksd-blue transition-colors p-1 h-auto\"\n                  onClick={() => onPlayMessage(\"Hello! I'm your RKSD College assistant. Ask me about admissions, departments, events, hostel timings, or any other college information. You can speak or type your questions.\")}\n                >\n                  <Play size={12} />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Chat Messages */}\n        {messages.map((message) => (\n          <div key={message.id} className=\"mb-6\">\n            {message.role === \"user\" ? (\n              /* User message - small bubble aligned right */\n              <div className=\"flex justify-end\">\n                <div className=\"flex items-end space-x-2 max-w-xs\">\n                  <div className=\"bg-rksd-blue rounded-2xl rounded-br-md px-4 py-2\">\n                    <p className=\"text-sm text-white\">{message.content}</p>\n                  </div>\n                  <div className=\"w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <User className=\"text-gray-600\" size={12} />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              /* Assistant message - full-width, left-aligned */\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-rksd-blue rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Bot className=\"text-white\" size={16} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"bg-transparent px-0 py-2\">\n                    <div className=\"text-sm text-gray-900 leading-relaxed whitespace-pre-wrap\">\n                      {formatMessage(message.content)}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center mt-3 space-x-3\">\n                    <span className=\"text-xs text-gray-500\">\n                      {formatTime(message.timestamp)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-gray-400 hover:text-rksd-blue transition-colors p-1 h-auto\"\n                      onClick={() => onPlayMessage(message.content)}\n                    >\n                      <Play size={12} />\n                    </Button>\n                    {currentlySpeaking && (\n                      <span className=\"text-xs text-green-600 flex items-center\">\n                        <Volume2 className=\"mr-1\" size={12} />\n                        Playing\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-start space-x-3 mb-6\">\n            <div className=\"w-8 h-8 bg-rksd-blue rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n              <Bot className=\"text-white\" size={16} />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"bg-transparent px-0 py-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-rksd-blue rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-rksd-blue rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-2 h-2 bg-rksd-blue rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6378},"client/src/components/input-area.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Mic, \n  MicOff, \n  Send, \n  Clock, \n  Phone, \n  Calendar, \n  Building \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface InputAreaProps {\n  onSendMessage: (message: string) => void;\n  onToggleVoice: () => void;\n  onQuickQuery: (query: string) => void;\n  isListening: boolean;\n  transcript: string;\n  isProcessing: boolean;\n  voiceSupported: boolean;\n}\n\nexport function InputArea({\n  onSendMessage,\n  onToggleVoice,\n  onQuickQuery,\n  isListening,\n  transcript,\n  isProcessing,\n  voiceSupported\n}: InputAreaProps) {\n  const [textInput, setTextInput] = useState(\"\");\n\n  const handleSendText = () => {\n    const message = textInput.trim() || transcript.trim();\n    if (message) {\n      onSendMessage(message);\n      setTextInput(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendText();\n    }\n  };\n\n  const quickQueries = [\n    { icon: Clock, text: \"College Timings\", query: \"College ka timing kya hai?\" },\n    { icon: Phone, text: \"Contact Info\", query: \"College ka contact number kya hai?\" },\n    { icon: Calendar, text: \"Events\", query: \"Upcoming events kya hai college me?\" },\n    { icon: Building, text: \"Departments\", query: \"College me kya departments hai?\" },\n  ];\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"space-y-4\">\n        {/* Voice Input Section */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-[var(--rksd-blue)] to-[var(--rksd-light)] rounded-full flex items-center justify-center relative\">\n              <Mic className=\"text-white\" size={20} />\n              {isListening && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white\"></div>\n              )}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">\n                {isListening ? \"Listening...\" : transcript ? \"Voice detected\" : \"Ready to listen\"}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                {voiceSupported \n                  ? \"Click microphone and speak your question\"\n                  : \"Voice input not supported in this browser\"\n                }\n              </p>\n            </div>\n          </div>\n          <Button\n            onClick={onToggleVoice}\n            disabled={!voiceSupported}\n            className={cn(\n              \"inline-flex items-center px-4 py-2 rounded-lg transition-colors duration-200 font-medium text-sm\",\n              isListening\n                ? \"bg-red-500 hover:bg-red-600 text-white\"\n                : \"bg-gradient-to-r from-[var(--rksd-blue)] to-[var(--rksd-light)] hover:from-[var(--rksd-light)] hover:to-[var(--rksd-blue)] text-white\"\n            )}\n          >\n            {isListening ? (\n              <>\n                <MicOff className=\"mr-2\" size={16} />\n                <span>Stop Listening</span>\n              </>\n            ) : (\n              <>\n                <Mic className=\"mr-2\" size={16} />\n                <span>Start Listening</span>\n              </>\n            )}\n          </Button>\n        </div>\n\n        {/* Show transcript if available */}\n        {transcript && (\n          <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Voice input:</strong> {transcript}\n            </p>\n          </div>\n        )}\n\n        {/* Text Input Section */}\n        <div className=\"relative\">\n          <Textarea\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"w-full resize-none border border-gray-300 rounded-lg px-4 py-3 pr-12 focus:ring-2 focus:ring-rksd-blue focus:border-rksd-blue transition-colors text-sm\"\n            placeholder=\"Type your question here... (Hindi और English both supported)\"\n            rows={3}\n            disabled={isProcessing}\n          />\n          <Button\n            onClick={handleSendText}\n            disabled={isProcessing || (!textInput.trim() && !transcript.trim())}\n            className=\"absolute bottom-3 right-3 w-8 h-8 bg-rksd-blue hover:bg-blue-700 text-white rounded-lg transition-colors duration-200 p-0\"\n          >\n            <Send size={16} />\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap gap-2\">\n          {quickQueries.map(({ icon: Icon, text, query }) => (\n            <Button\n              key={text}\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => onQuickQuery(query)}\n              disabled={isProcessing}\n              className=\"inline-flex items-center px-3 py-1.5 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors text-sm\"\n            >\n              <Icon className=\"mr-1.5\" size={12} />\n              {text}\n            </Button>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5353},"client/src/components/voice-controls.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Volume2, VolumeX, Play, Square } from \"lucide-react\";\n\ninterface VoiceControlsProps {\n  isSpeaking: boolean;\n  onToggleSpeak: () => void;\n  ttsSupported: boolean;\n}\n\nexport function VoiceControls({ isSpeaking, onToggleSpeak, ttsSupported }: VoiceControlsProps) {\n  return (\n    <div className=\"mb-6\">\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-rksd-light rounded-full flex items-center justify-center\">\n              <Volume2 className=\"text-white\" size={16} />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">\n                {isSpeaking ? \"Speaking Response\" : \"Voice Assistant Ready\"}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                {ttsSupported ? \"Hindi & English supported\" : \"Text-to-speech not supported\"}\n              </p>\n            </div>\n          </div>\n          <Button\n            onClick={onToggleSpeak}\n            disabled={!ttsSupported}\n            className={`inline-flex items-center px-4 py-2 rounded-lg transition-colors duration-200 font-medium text-sm ${\n              isSpeaking\n                ? \"bg-red-500 hover:bg-red-600 text-white\"\n                : \"bg-rksd-blue hover:bg-blue-700 text-white\"\n            }`}\n          >\n            {isSpeaking ? (\n              <>\n                <Square className=\"mr-2\" size={16} />\n                <span>Stop</span>\n              </>\n            ) : (\n              <>\n                <Play className=\"mr-2\" size={16} />\n                <span>Speak</span>\n              </>\n            )}\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1866},"client/src/hooks/use-elevenlabs.tsx":{"content":"import { useState, useCallback } from \"react\";\n\ninterface ElevenLabsOptions {\n  onEnd?: () => void;\n  onError?: (error: string) => void;\n  voiceId?: string;\n  modelId?: string;\n  stability?: number;\n  similarityBoost?: number;\n}\n\ninterface UseElevenLabsReturn {\n  speak: (text: string, options?: ElevenLabsOptions) => Promise<void>;\n  stop: () => void;\n  isSpeaking: boolean;\n  isLoading: boolean;\n}\n\nexport function useElevenLabs(): UseElevenLabsReturn {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);\n\n  // Female voices for consistency - using user specified voice\n  const VOICES = {\n    hindi: \"iWNf11sz1GrUE4ppxTOL\", // User specified female voice for Hindi\n    english: \"iWNf11sz1GrUE4ppxTOL\", // User specified female voice for English\n  };\n\n  const speak = useCallback(async (text: string, options: ElevenLabsOptions = {}) => {\n    console.log('TTS: Starting speech for:', text.substring(0, 50));\n    \n    // Try ElevenLabs API first, fallback to Web Speech API with female voice\n    try {\n      setIsLoading(true);\n      \n      // Stop any current audio\n      if (currentAudio) {\n        currentAudio.pause();\n        currentAudio.currentTime = 0;\n      }\n\n      // Try ElevenLabs first\n      try {\n        const voiceId = options.voiceId || VOICES.english;\n\n        const response = await fetch('/api/tts', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            text: text,\n            voiceId: voiceId,\n            modelId: options.modelId || \"eleven_monolingual_v1\",\n            stability: options.stability || 0.5,\n            similarityBoost: options.similarityBoost || 0.5\n          })\n        });\n\n        if (response.ok) {\n          const audioBlob = await response.blob();\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          \n          setCurrentAudio(audio);\n          setIsLoading(false);\n          setIsSpeaking(true);\n          \n          console.log('TTS: ElevenLabs audio ready, playing...');\n\n          audio.onended = () => {\n            setIsSpeaking(false);\n            setCurrentAudio(null);\n            URL.revokeObjectURL(audioUrl);\n            console.log('TTS: ElevenLabs audio finished');\n            options.onEnd?.();\n          };\n\n          audio.onerror = () => {\n            setIsSpeaking(false);\n            setIsLoading(false);\n            setCurrentAudio(null);\n            URL.revokeObjectURL(audioUrl);\n            console.error('TTS: Audio playback failed');\n            options.onError?.(\"Audio playback failed\");\n          };\n\n          await audio.play();\n          return; // Success with ElevenLabs\n        } else {\n          const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));\n          throw new Error(errorData.message || `HTTP ${response.status}`);\n        }\n      } catch (elevenlabsError) {\n        console.warn('ElevenLabs failed, falling back to Web Speech API:', elevenlabsError instanceof Error ? elevenlabsError.message : 'Unknown error');\n      }\n\n      // Fallback to Web Speech API with female voice\n      if ('speechSynthesis' in window) {\n        window.speechSynthesis.cancel();\n        \n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.2; // Higher pitch for more feminine sound\n        utterance.volume = 1.0;\n        utterance.lang = 'en-US';\n        \n        // Try to get a female voice\n        const voices = speechSynthesis.getVoices();\n        const femaleVoice = voices.find(voice => \n          voice.name.toLowerCase().includes('female') ||\n          voice.name.toLowerCase().includes('woman') ||\n          voice.name.toLowerCase().includes('google us english female') ||\n          voice.name.toLowerCase().includes('samantha') ||\n          voice.name.toLowerCase().includes('karen')\n        );\n        \n        if (femaleVoice) {\n          utterance.voice = femaleVoice;\n        }\n        \n        setIsLoading(false);\n        setIsSpeaking(true);\n        \n        utterance.onend = () => {\n          setIsSpeaking(false);\n          options.onEnd?.();\n        };\n        \n        utterance.onerror = (event) => {\n          setIsSpeaking(false);\n          setIsLoading(false);\n          options.onError?.(`Speech failed: ${event.error}`);\n        };\n        \n        speechSynthesis.speak(utterance);\n        return;\n      }\n      \n      throw new Error('No speech synthesis available');\n\n    } catch (error) {\n      setIsSpeaking(false);\n      setIsLoading(false);\n      setCurrentAudio(null);\n      console.error('All TTS methods failed:', error);\n      options.onError?.(error instanceof Error ? error.message : \"Speech synthesis failed\");\n    }\n  }, [currentAudio]);\n\n  const stop = useCallback(() => {\n    if (currentAudio) {\n      currentAudio.pause();\n      currentAudio.currentTime = 0;\n      setCurrentAudio(null);\n    }\n    // Stop Web Speech API as well\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n    }\n    setIsSpeaking(false);\n    setIsLoading(false);\n  }, [currentAudio]);\n\n  return {\n    speak,\n    stop,\n    isSpeaking,\n    isLoading,\n  };\n}","size_bytes":5380},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-speech.tsx":{"content":"import { useState, useCallback, useRef } from \"react\";\n\ninterface SpeechOptions {\n  onEnd?: () => void;\n  onError?: (error: string) => void;\n  voice?: SpeechSynthesisVoice;\n  rate?: number;\n  pitch?: number;\n  volume?: number;\n}\n\ninterface UseSpeechReturn {\n  speak: (text: string, options?: SpeechOptions) => void;\n  stop: () => void;\n  isSpeaking: boolean;\n  supported: boolean;\n  voices: SpeechSynthesisVoice[];\n}\n\nexport function useSpeech(): UseSpeechReturn {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\n  const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  const supported = typeof window !== 'undefined' && 'speechSynthesis' in window;\n\n  // Load available voices\n  const loadVoices = useCallback(() => {\n    if (!supported) return;\n    \n    const availableVoices = speechSynthesis.getVoices();\n    setVoices(availableVoices);\n  }, [supported]);\n\n  // Initialize voices on component mount\n  useState(() => {\n    if (supported) {\n      loadVoices();\n      speechSynthesis.addEventListener('voiceschanged', loadVoices);\n      return () => {\n        speechSynthesis.removeEventListener('voiceschanged', loadVoices);\n      };\n    }\n  });\n\n  const speak = useCallback((text: string, options: SpeechOptions = {}) => {\n    if (!supported || !text.trim()) return;\n\n    // Stop any current speech\n    speechSynthesis.cancel();\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    utteranceRef.current = utterance;\n\n    // Detect language and set appropriate voice\n    const isHindi = /[\\u0900-\\u097F]/.test(text);\n    const preferredVoices = voices.filter(voice => \n      isHindi \n        ? voice.lang.includes('hi') || voice.lang.includes('Hindi')\n        : voice.lang.includes('en')\n    );\n\n    if (preferredVoices.length > 0) {\n      utterance.voice = options.voice || preferredVoices[0];\n    }\n\n    // Set speech parameters\n    utterance.rate = options.rate || 0.9;\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 1;\n    utterance.lang = isHindi ? 'hi-IN' : 'en-US';\n\n    // Event handlers\n    utterance.onstart = () => {\n      setIsSpeaking(true);\n    };\n\n    utterance.onend = () => {\n      setIsSpeaking(false);\n      options.onEnd?.();\n    };\n\n    utterance.onerror = (event) => {\n      setIsSpeaking(false);\n      options.onError?.(event.error);\n    };\n\n    // Speak\n    speechSynthesis.speak(utterance);\n  }, [supported, voices]);\n\n  const stop = useCallback(() => {\n    if (!supported) return;\n    \n    speechSynthesis.cancel();\n    setIsSpeaking(false);\n  }, [supported]);\n\n  return {\n    speak,\n    stop,\n    isSpeaking,\n    supported,\n    voices,\n  };\n}\n","size_bytes":2709},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\n\ninterface UseVoiceReturn {\n  isListening: boolean;\n  transcript: string;\n  startListening: () => void;\n  stopListening: () => void;\n  resetTranscript: () => void;\n  browserSupported: boolean;\n}\n\nexport function useVoice(): UseVoiceReturn {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);\n\n  const browserSupported = typeof window !== 'undefined' && \n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window);\n\n  useEffect(() => {\n    if (!browserSupported) return;\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US'; // Primary language\n    recognition.maxAlternatives = 1;\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setTranscript(transcript);\n      setIsListening(false);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    setRecognition(recognition);\n\n    return () => {\n      if (recognition) {\n        recognition.stop();\n      }\n    };\n  }, [browserSupported]);\n\n  const startListening = useCallback(() => {\n    if (!recognition || isListening) return;\n    \n    try {\n      setTranscript(\"\");\n      setIsListening(true);\n      recognition.start();\n    } catch (error) {\n      console.error('Error starting speech recognition:', error);\n      setIsListening(false);\n    }\n  }, [recognition, isListening]);\n\n  const stopListening = useCallback(() => {\n    if (!recognition || !isListening) return;\n    \n    recognition.stop();\n    setIsListening(false);\n  }, [recognition, isListening]);\n\n  const resetTranscript = useCallback(() => {\n    setTranscript(\"\");\n  }, []);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    resetTranscript,\n    browserSupported,\n  };\n}\n\n// Extend Window interface for TypeScript\ndeclare global {\n  interface Window {\n    SpeechRecognition: typeof SpeechRecognition;\n    webkitSpeechRecognition: typeof SpeechRecognition;\n  }\n}\n","size_bytes":2442},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useVoice } from \"@/hooks/use-voice\";\nimport { useThreeTierTTS } from \"@/hooks/use-three-tier-tts\";\nimport { WaveformAnimation } from \"@/components/WaveformAnimation\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ChevronLeft, \n  Mic, \n  Play, \n  GraduationCap, \n  Clock, \n  DollarSign, \n  Users, \n  Send\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n// Format message to render emojis and basic markdown\nconst formatMessage = (message: string) => {\n  const lines = message.split('\\n');\n  \n  return lines.map((line, index) => {\n    // Handle table headers and rows\n    if (line.includes('|') && line.includes('-')) {\n      return (\n        <div key={index} className=\"my-2 overflow-x-auto\">\n          <table className=\"w-full text-xs border-collapse\">\n            <tbody>\n              <tr className=\"border-b\">\n                {line.split('|').filter(cell => cell.trim()).map((cell, cellIndex) => (\n                  <td key={cellIndex} className=\"p-1 border-r last:border-r-0 font-medium\">\n                    {cell.trim()}\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    \n    // Handle regular table rows\n    if (line.includes('|') && !line.includes('-')) {\n      return (\n        <div key={index} className=\"my-1 overflow-x-auto\">\n          <table className=\"w-full text-xs border-collapse\">\n            <tbody>\n              <tr>\n                {line.split('|').filter(cell => cell.trim()).map((cell, cellIndex) => (\n                  <td key={cellIndex} className=\"p-1 border-r last:border-r-0\">\n                    {cell.trim()}\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    \n    // Handle section headers with emojis\n    if (line.includes('🎓') || line.includes('📌') || line.includes('⏰') || line.includes('📞')) {\n      return (\n        <div key={index} className=\"font-semibold text-[var(--slate-text)] my-2\">\n          {line}\n        </div>\n      );\n    }\n    \n    // Handle horizontal rules\n    if (line.trim() === '---') {\n      return <hr key={index} className=\"my-2 border-gray-200\" />;\n    }\n    \n    // Regular lines with emojis preserved\n    if (line.trim()) {\n      return (\n        <div key={index} className=\"my-1\">\n          {line}\n        </div>\n      );\n    }\n    \n    return <br key={index} />;\n  });\n};\n\nexport default function Home() {\n  const [showListening, setShowListening] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState(\"\");\n  const [showResponse, setShowResponse] = useState(false);\n  const [liveTranscript, setLiveTranscript] = useState(\"\");\n  const [textInput, setTextInput] = useState(\"\");\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatHistory, setChatHistory] = useState<Array<{type: 'user' | 'assistant', message: string, id: string}>>([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [isPreparingSpeech, setIsPreparingSpeech] = useState(false);\n  const [pendingAssistantMessage, setPendingAssistantMessage] = useState<{id: string, text: string} | null>(null);\n  const requestIdRef = useRef(0);\n  const chatAreaRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Voice input\n  const {\n    isListening,\n    startListening,\n    stopListening,\n    transcript,\n    browserSupported,\n    resetTranscript,\n  } = useVoice();\n\n  // Three-tier TTS (Cartesia -> ElevenLabs -> Browser)\n  const { speak, stop: stopSpeaking, isSpeaking, isLoading: isTTSLoading } = useThreeTierTTS();\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { message: string; language?: string }) => {\n      setIsTyping(true);\n      const response = await apiRequest(\"POST\", \"/api/ask\", data);\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      setShowListening(false);\n      setIsTyping(false);\n      if (data.response) {\n        const assistantMessageId = `assistant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        const currentRequestId = ++requestIdRef.current;\n        \n        // Keep typing animation and prepare speech first\n        setIsPreparingSpeech(true);\n        setPendingAssistantMessage({id: assistantMessageId, text: data.response});\n        \n        // Start preparing speech with onStart callback for precise sync\n        speak(data.response, {\n          onStart: () => {\n            // Check if this is still the latest request\n            if (currentRequestId === requestIdRef.current) {\n              // Voice started, now show text synchronized with audio\n              setChatHistory(prev => [...prev, {type: 'assistant', message: data.response, id: assistantMessageId}]);\n              setIsPreparingSpeech(false);\n              setPendingAssistantMessage(null);\n            }\n          },\n          onEnd: () => {\n            console.log('Speech completed');\n          },\n          onError: (error) => {\n            console.error('Speech failed:', error);\n            // Check if this is still the latest request\n            if (currentRequestId === requestIdRef.current) {\n              // On error, show text immediately\n              setChatHistory(prev => [...prev, {type: 'assistant', message: data.response, id: assistantMessageId}]);\n              setIsPreparingSpeech(false);\n              setPendingAssistantMessage(null);\n              toast({\n                title: \"Voice playback failed\",\n                description: \"Text shown without voice due to audio error\",\n                variant: \"default\",\n              });\n            }\n          }\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Send message error:\", error);\n      setShowListening(false);\n      setIsTyping(false);\n      toast({\n        title: \"Connection Error\",\n        description: error?.message || \"Failed to send message. Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendMessage = useCallback((message: string) => {\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    \n    // Cancel any pending assistant message\n    if (pendingAssistantMessage) {\n      setPendingAssistantMessage(null);\n      setIsPreparingSpeech(false);\n      stopSpeaking();\n    }\n    \n    setChatStarted(true);\n    const userMessageId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    setChatHistory(prev => [...prev, {type: 'user', message: message.trim(), id: userMessageId}]);\n    \n    sendMessageMutation.mutate({\n      message: message.trim(),\n      language: \"en\"\n    });\n    \n    setTextInput(\"\");\n    resetTranscript();\n  }, [sendMessageMutation, resetTranscript, pendingAssistantMessage, stopSpeaking]);\n\n  const handleSpeak = useCallback((text: string) => {\n    if (isSpeaking) {\n      stopSpeaking();\n    } else {\n      speak(text);\n    }\n  }, [isSpeaking, speak, stopSpeaking]);\n\n  const handleMicClick = useCallback(() => {\n    if (!browserSupported) {\n      toast({\n        title: \"Voice input not supported\",\n        description: \"Your browser doesn't support voice input.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Stop any ongoing speech first\n    if (isSpeaking) {\n      stopSpeaking();\n    }\n\n    if (isListening) {\n      stopListening();\n      setShowListening(false);\n    } else {\n      setChatStarted(true);\n      setShowListening(true);\n      setShowResponse(false);\n      resetTranscript();\n      startListening();\n    }\n  }, [browserSupported, isListening, isSpeaking, startListening, stopListening, stopSpeaking, resetTranscript, toast]);\n\n  const handleQuickAction = useCallback((query: string) => {\n    sendMessage(query);\n  }, [sendMessage]);\n\n  const handleCancelListening = useCallback(() => {\n    stopListening();\n    setShowListening(false);\n    resetTranscript();\n  }, [stopListening, resetTranscript]);\n\n  const handleSendText = useCallback(() => {\n    const message = textInput.trim();\n    if (message) {\n      sendMessage(message);\n    }\n  }, [textInput, sendMessage]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendText();\n    }\n  }, [handleSendText]);\n\n  // Process voice transcript\n  useEffect(() => {\n    if (transcript && !isListening) {\n      sendMessage(transcript);\n    }\n  }, [transcript, isListening, sendMessage]);\n\n  // Update live transcript while listening\n  useEffect(() => {\n    if (isListening) {\n      setLiveTranscript(transcript);\n    }\n  }, [transcript, isListening]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (chatAreaRef.current) {\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    }\n  }, [chatHistory, isTyping, isPreparingSpeech]);\n\n  // Removed duplicate useEffect - text is now added via onStart callback in speak function\n\n  // Removed safety timeout useEffect to prevent duplicate messages\n\n  const quickActions = [\n    {\n      id: \"admissions\",\n      icon: GraduationCap,\n      title: \"Admissions\",\n      subtitle: \"Apply, eligibility, docs\",\n      query: \"Tell me about RKSD college admissions process and eligibility criteria\"\n    },\n    {\n      id: \"timetable\",\n      icon: Clock,\n      title: \"Timetable\",\n      subtitle: \"Today's schedule\",\n      query: \"Show me college timings and today's schedule\"\n    },\n    {\n      id: \"fees\",\n      icon: DollarSign,\n      title: \"Fees & Scholarships\",\n      subtitle: \"Cost & financial aid\",\n      query: \"What are the fee structure and available scholarships at RKSD?\"\n    },\n    {\n      id: \"faculty\",\n      icon: Users,\n      title: \"Faculty\",\n      subtitle: \"Departments & staff\",\n      query: \"Tell me about the faculty and departments at RKSD college\"\n    }\n  ];\n\n\n  return (\n    <div className=\"w-full bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 text-[var(--slate-text)] flex flex-col relative overflow-hidden\"\n         style={{ \n           maxWidth: '100vw', \n           height: '100vh',\n           minHeight: '100vh',\n           maxHeight: '100vh'\n         }}>\n      {/* Background decoration */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-[var(--rksd-blue)]/10 to-[var(--rksd-light)]/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-40 right-16 w-24 h-24 bg-gradient-to-br from-purple-400/10 to-pink-400/10 rounded-full blur-2xl\"></div>\n        <div className=\"absolute bottom-32 left-20 w-40 h-40 bg-gradient-to-br from-teal-400/10 to-cyan-400/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-20 right-10 w-28 h-28 bg-gradient-to-br from-[var(--rksd-light)]/10 to-blue-400/10 rounded-full blur-2xl\"></div>\n      </div>\n      {/* Voice Assistant Welcome */}\n      \n      \n      {/* Enhanced Header with Professional Branding */}\n      <header className=\"flex items-center justify-between px-4 pt-[env(safe-area-inset-top)] h-16 bg-white/20 backdrop-blur-md border-b border-white/10\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"relative\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-[var(--rksd-blue)] to-[var(--rksd-light)] rounded-xl flex items-center justify-center shadow-lg\">\n              <span className=\"text-white font-bold text-lg\">🎓</span>\n            </div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white animate-pulse\"></div>\n          </div>\n          <div>\n            <h1 className=\"font-bold text-xl text-[var(--slate-text)]\">RKSD College</h1>\n            <p className=\"text-xs text-[var(--slate-muted)] font-medium\">Voice Assistant</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"px-3 py-1 bg-green-100 text-green-700 text-xs font-semibold rounded-full border border-green-200\">\n            ● Online\n          </div>\n        </div>\n      </header>\n\n      {/* Chat Interface - Full Screen Layout */}\n      <div className=\"flex-1 flex flex-col min-h-0 px-4 sm:px-5 relative z-10\">\n\n        {/* Chat Interface */}\n        <AnimatePresence>\n          {chatStarted ? (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4, ease: \"easeOut\" }}\n              className=\"flex-1 flex flex-col min-h-0\"\n            >\n              {/* Voice Assistant Animation - Always Visible */}\n              <div \n                className=\"flex justify-center py-4 h-[100px] items-center overflow-hidden\" \n                style={{ \n                  contain: 'layout style',\n                  willChange: 'auto',\n                  transform: 'translateZ(0)'\n                }}\n              >\n                <div style={{ contain: 'layout', transform: 'translateZ(0)' }}>\n                  <WaveformAnimation \n                    isListening={isListening} \n                    isSpeaking={isSpeaking} \n                    isActive={isListening || sendMessageMutation.isPending || isTyping || isSpeaking}\n                  />\n                </div>\n              </div>\n\n              {/* Chat Messages Area - Scrollable */}\n              <div\n                ref={chatAreaRef}\n                className=\"flex-1 overflow-y-auto space-y-3 sm:space-y-4 pb-20 px-1\"\n              >\n                {chatHistory.map((chat, index) => (\n                  <motion.div\n                    key={chat.id}\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.35, ease: \"easeOut\" }}\n                    className={`flex ${chat.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div\n                      className={`inline-block px-4 py-2 rounded-2xl max-w-[80%] sm:max-w-md shadow-md\n                      ${chat.type === 'user'\n                        ? 'bg-[var(--teal-primary)] text-white rounded-tr-sm'\n                        : 'bg-white text-[var(--slate-text)] rounded-tl-sm border border-gray-200'\n                      }`}\n                    >\n                      <div className=\"text-sm leading-relaxed prose prose-sm max-w-none\">\n                        {formatMessage(chat.message)}\n                      </div>\n\n                      {/* Replay button for assistant */}\n                      {chat.type === 'assistant' && (\n                        <button\n                          onClick={() => handleSpeak(chat.message)}\n                          className=\"mt-2 inline-flex items-center gap-1 text-[var(--teal-primary)] hover:text-[var(--teal-secondary)] transition-colors\"\n                          data-testid=\"button-replay\"\n                        >\n                          <Play size={12} />\n                          <span className=\"text-xs font-medium\">Replay</span>\n                        </button>\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n\n                {/* Typing Indicator */}\n                {(isTyping || isPreparingSpeech) && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"flex justify-start\"\n                  >\n                    <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-2xl bg-white border border-gray-200 shadow-md\">\n                      <span className=\"text-sm text-[var(--slate-muted)]\">\n                        {isTyping ? \"Assistant is thinking...\" : \"Preparing response...\"}\n                      </span>\n                      <div className=\"flex gap-1\" style={{ transform: 'translateZ(0)', willChange: 'auto' }}>\n                        <span className=\"w-2 h-2 bg-[var(--teal-primary)] rounded-full animate-bounce\" style={{ transform: 'translateZ(0)' }}></span>\n                        <span className=\"w-2 h-2 bg-[var(--teal-primary)] rounded-full animate-bounce delay-150\" style={{ transform: 'translateZ(0)' }}></span>\n                        <span className=\"w-2 h-2 bg-[var(--teal-primary)] rounded-full animate-bounce delay-300\" style={{ transform: 'translateZ(0)' }}></span>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Live transcript during listening */}\n                {liveTranscript && showListening && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"flex justify-center\"\n                  >\n                    <div className=\"va-response-card p-3 text-center max-w-[80%] sm:max-w-xs\">\n                      <p className=\"text-sm text-[var(--slate-muted)]\">\n                        \"{liveTranscript}\"\n                      </p>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n            </motion.div>\n          ) : (\n            <motion.div\n              initial={{ opacity: 1, y: 0 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4, ease: \"easeInOut\" }}\n              className=\"flex-1 flex flex-col\"\n            >\n              {/* Voice Assistant Animation - Always Visible */}\n              <div \n                className=\"flex justify-center py-4 h-[100px] items-center overflow-hidden\" \n                style={{ \n                  contain: 'layout style',\n                  willChange: 'auto',\n                  transform: 'translateZ(0)'\n                }}\n              >\n                <div style={{ contain: 'layout', transform: 'translateZ(0)' }}>\n                  <WaveformAnimation \n                    isListening={isListening} \n                    isSpeaking={isSpeaking} \n                    isActive={isListening || sendMessageMutation.isPending || isTyping || isSpeaking}\n                  />\n                </div>\n              </div>\n\n              {/* Enhanced Welcome Section */}\n              <div className=\"py-6 text-center\">\n                <div className=\"mb-4\">\n                  <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-white/40 backdrop-blur-sm rounded-full border border-white/20 shadow-sm\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm font-medium text-[var(--slate-text)]\">AI Assistant Ready</span>\n                  </div>\n                </div>\n                <h1 className=\"text-2xl sm:text-3xl font-bold mb-2\">\n                  <span className=\"bg-gradient-to-r from-[var(--rksd-blue)] to-[var(--rksd-light)] bg-clip-text text-transparent\">\n                    Hello Students!\n                  </span>\n                  <span className=\"ml-2\">👋</span>\n                </h1>\n                <p className=\"text-[var(--slate-muted)] text-lg font-medium\">\n                  How can I assist you today?\n                </p>\n                <p className=\"text-sm text-[var(--slate-muted)] mt-2 opacity-80\">\n                  Ask me anything about RKSD College in Hindi or English\n                </p>\n              </div>\n\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Response Card - Only show when chat hasn't started */}\n      <AnimatePresence>\n        {showResponse && currentResponse && !chatStarted && (\n          <motion.section \n            initial={{ opacity: 0, y: 20, scale: 0.95 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: -20, scale: 0.95 }}\n            transition={{ duration: 0.2, ease: \"easeOut\" }}\n            className=\"px-5 mt-6\"\n          >\n            <div className=\"va-response-card p-4\">\n              <p className=\"text-[var(--slate-text)] leading-relaxed text-sm\">\n                {currentResponse}\n              </p>\n              <button\n                onClick={() => handleSpeak(currentResponse)}\n                className=\"mt-3 inline-flex items-center gap-2 text-[var(--teal-primary)] hover:text-[var(--teal-secondary)] transition-colors\"\n                data-testid=\"button-replay\"\n              >\n                <Play size={14} />\n                <span className=\"text-sm font-medium\">Replay</span>\n              </button>\n            </div>\n          </motion.section>\n        )}\n      </AnimatePresence>\n\n      {/* Fixed Bottom Input - Like WhatsApp/ChatGPT */}\n      <div\n        className=\"fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-sm border-t border-gray-200 px-3 py-2 z-20\"\n        style={{ paddingBottom: 'calc(8px + env(safe-area-inset-bottom, 8px))' }}\n      >\n        <div className=\"flex items-center gap-2 bg-white shadow-sm rounded-full p-2 border border-gray-200\">\n          <input\n            type=\"text\"\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message...\"\n            disabled={sendMessageMutation.isPending}\n            className=\"flex-1 bg-transparent px-3 py-2 outline-none placeholder-gray-500 text-gray-800 text-sm disabled:opacity-50\"\n            data-testid=\"input-message\"\n          />\n\n          {/* Send Button - Shows when there's text */}\n          {textInput.trim() ? (\n            <button\n              onClick={handleSendText}\n              disabled={sendMessageMutation.isPending}\n              className=\"h-10 w-10 sm:h-12 sm:w-12 rounded-full flex items-center justify-center transition-all bg-[var(--teal-primary)] hover:bg-[var(--teal-secondary)] disabled:opacity-50\"\n              data-testid=\"button-send\"\n            >\n              <Send size={18} className=\"text-white\" />\n            </button>\n          ) : (\n            <button\n              onClick={handleMicClick}\n              disabled={!browserSupported || sendMessageMutation.isPending}\n              className={`h-10 w-10 sm:h-12 sm:w-12 rounded-full flex items-center justify-center transition-all ${\n                isListening\n                  ? \"bg-red-500 hover:bg-red-600\"\n                  : \"bg-gradient-to-r from-[var(--rksd-blue)] to-[var(--rksd-light)] hover:from-[var(--rksd-light)] hover:to-[var(--rksd-blue)]\"\n              } disabled:opacity-50`}\n              style={isListening ? { transform: 'translateZ(0)', animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite' } : { transform: 'translateZ(0)' }}\n              data-testid=\"button-microphone\"\n            >\n              <Mic size={18} className=\"text-white\" />\n            </button>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}","size_bytes":23305},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ThreeDOrb.tsx":{"content":"import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { createNoise3D } from \"simplex-noise\";\nimport useWebRTCAudioSession from \"@/hooks/use-webrtc\";\n\ninterface ThreeDOrbProps {\n  intensity?: number;\n  isListening?: boolean;\n  isSpeaking?: boolean;\n}\n\nconst ThreeDOrb: React.FC<ThreeDOrbProps> = ({ \n  intensity = 3, \n  isListening = false,\n  isSpeaking = false \n}) => {\n  const { currentVolume, isSessionActive, handleStartStopClick } = useWebRTCAudioSession('alloy');\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const groupRef = useRef<THREE.Group | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const ballRef = useRef<THREE.Mesh | null>(null);\n  const originalPositionsRef = useRef<any | null>(null);\n  const noise = createNoise3D();\n\n  useEffect(() => {\n    initViz();\n    window.addEventListener(\"resize\", onWindowResize);\n    return () => {\n      window.removeEventListener(\"resize\", onWindowResize);\n      cleanup();\n    };\n  }, []);\n\n  useEffect(() => {\n    if ((isListening || isSpeaking || isSessionActive) && ballRef.current) {\n      const audioVolume = isListening || isSpeaking ? 0.8 : currentVolume;\n      updateBallMorph(ballRef.current, audioVolume);\n    } else if (ballRef.current && originalPositionsRef.current) {\n      resetBallMorph(ballRef.current, originalPositionsRef.current);\n    }\n  }, [currentVolume, isSessionActive, isListening, isSpeaking]);\n\n  const cleanup = () => {\n    if (rendererRef.current) {\n      const outElement = document.getElementById(\"rksd-orb\");\n      if (outElement && rendererRef.current.domElement) {\n        outElement.removeChild(rendererRef.current.domElement);\n      }\n      rendererRef.current.dispose();\n    }\n  };\n\n  const initViz = () => {\n    const scene = new THREE.Scene();\n    const group = new THREE.Group();\n    const camera = new THREE.PerspectiveCamera(20, 1, 1, 100);\n    camera.position.set(0, 0, 100);\n    camera.lookAt(scene.position);\n\n    scene.add(camera);\n    sceneRef.current = scene;\n    groupRef.current = group;\n    cameraRef.current = camera;\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    const outElement = document.getElementById(\"rksd-orb\");\n    if (outElement) {\n      outElement.innerHTML = \"\";\n      outElement.appendChild(renderer.domElement);\n      \n      const width = outElement.clientWidth;\n      renderer.setSize(width, width);\n      \n      renderer.domElement.style.width = '100%';\n      renderer.domElement.style.height = '100%';\n      renderer.domElement.style.objectFit = 'contain';\n    }\n\n    rendererRef.current = renderer;\n\n    const icosahedronGeometry = new THREE.IcosahedronGeometry(10, 8);\n    \n    // RKSD Colors - Pink to Purple gradient material\n    const lambertMaterial = new THREE.MeshLambertMaterial({\n      color: 0xff69b4, // Hot pink\n      wireframe: true,\n      transparent: true,\n      opacity: 0.8,\n    });\n\n    const ball = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n    ball.position.set(0, 0, 0);\n    ballRef.current = ball;\n\n    // Store the original positions of the vertices\n    originalPositionsRef.current = ball.geometry.attributes.position.array.slice();\n\n    group.add(ball);\n\n    // RKSD theme lighting\n    const ambientLight = new THREE.AmbientLight(0xff69b4, 0.3); // Pink ambient\n    scene.add(ambientLight);\n\n    const spotLight = new THREE.SpotLight(0x9f7aea); // Purple spotlight\n    spotLight.intensity = 1.2;\n    spotLight.position.set(-10, 40, 20);\n    spotLight.lookAt(ball.position);\n    spotLight.castShadow = true;\n    scene.add(spotLight);\n\n    // Additional purple light for gradient effect\n    const purpleLight = new THREE.PointLight(0x8b5cf6, 0.6);\n    purpleLight.position.set(10, -20, 30);\n    scene.add(purpleLight);\n\n    scene.add(group);\n    render();\n  };\n\n  const render = () => {\n    if (\n      !groupRef.current ||\n      !ballRef.current ||\n      !cameraRef.current ||\n      !rendererRef.current ||\n      !sceneRef.current\n    ) {\n      return;\n    }\n\n    // Slower rotation for more elegant look\n    groupRef.current.rotation.y += 0.003;\n    groupRef.current.rotation.x += 0.001;\n    \n    // Color animation based on state\n    const material = ballRef.current.material as THREE.MeshLambertMaterial;\n    const time = Date.now() * 0.001;\n    \n    if (isListening) {\n      // Pulsing pink when listening\n      const pulse = Math.sin(time * 4) * 0.3 + 0.7;\n      material.color.setHex(0xff1493 * pulse + 0xff69b4 * (1 - pulse));\n    } else if (isSpeaking) {\n      // Purple when speaking\n      material.color.setHex(0x9f7aea);\n    } else {\n      // Gradient animation between pink and purple\n      const colorShift = Math.sin(time * 0.8) * 0.5 + 0.5;\n      material.color.lerpColors(\n        new THREE.Color(0xff69b4), // Pink\n        new THREE.Color(0x9f7aea),  // Purple\n        colorShift\n      );\n    }\n\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n    requestAnimationFrame(render);\n  };\n\n  const onWindowResize = () => {\n    if (!cameraRef.current || !rendererRef.current) return;\n\n    const outElement = document.getElementById(\"rksd-orb\");\n    if (outElement) {\n      const width = outElement.clientWidth;\n      rendererRef.current.setSize(width, width);\n      \n      cameraRef.current.aspect = 1;\n      cameraRef.current.updateProjectionMatrix();\n    }\n  };\n\n  const updateBallMorph = (mesh: THREE.Mesh, volume: number) => {\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    const positionAttribute = geometry.getAttribute(\"position\");\n\n    for (let i = 0; i < positionAttribute.count; i++) {\n      const vertex = new THREE.Vector3(\n        positionAttribute.getX(i),\n        positionAttribute.getY(i),\n        positionAttribute.getZ(i),\n      );\n\n      const offset = 10;\n      const amp = 2.5;\n      const time = window.performance.now();\n      vertex.normalize();\n      const rf = 0.00001;\n      const distance =\n        offset +\n        volume * 4 * intensity +\n        noise(\n          vertex.x + time * rf * 7,\n          vertex.y + time * rf * 8,\n          vertex.z + time * rf * 9,\n        ) *\n          amp *\n          volume * intensity;\n      vertex.multiplyScalar(distance);\n\n      positionAttribute.setXYZ(i, vertex.x, vertex.y, vertex.z);\n    }\n\n    positionAttribute.needsUpdate = true;\n    geometry.computeVertexNormals();\n  };\n\n  const resetBallMorph = (\n    mesh: THREE.Mesh,\n    originalPositions: Float32Array,\n  ) => {\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    const positionAttribute = geometry.getAttribute(\"position\");\n\n    for (let i = 0; i < positionAttribute.count; i++) {\n      positionAttribute.setXYZ(\n        i,\n        originalPositions[i * 3],\n        originalPositions[i * 3 + 1],\n        originalPositions[i * 3 + 2],\n      );\n    }\n\n    positionAttribute.needsUpdate = true;\n    geometry.computeVertexNormals();\n  };\n\n  return (\n    <div className=\"w-48 h-48 relative\">\n      <div\n        id=\"rksd-orb\"\n        className=\"w-full h-full aspect-square\"\n        style={{ cursor: 'pointer' }}\n        onClick={handleStartStopClick}\n      />\n      {/* Glow effect overlay */}\n      <div className=\"absolute inset-0 rounded-full bg-gradient-to-br from-pink-500/20 to-purple-600/20 animate-pulse pointer-events-none\" />\n      <div className=\"absolute inset-4 rounded-full bg-gradient-to-br from-pink-500/10 to-purple-600/10 animate-ping pointer-events-none\" />\n    </div>\n  );\n};\n\nexport default ThreeDOrb;","size_bytes":7549},"client/src/hooks/use-webrtc.ts":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface UseWebRTCAudioSessionReturn {\n  currentVolume: number;\n  isSessionActive: boolean;\n  handleStartStopClick: () => void;\n}\n\nconst useWebRTCAudioSession = (voice: string = 'alloy'): UseWebRTCAudioSessionReturn => {\n  const [currentVolume, setCurrentVolume] = useState(0);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  const handleStartStopClick = () => {\n    if (isSessionActive) {\n      stopSession();\n    } else {\n      startSession();\n    }\n  };\n\n  const startSession = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      \n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      source.connect(analyserRef.current);\n      \n      setIsSessionActive(true);\n      analyzeAudio();\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  };\n\n  const stopSession = () => {\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    \n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    setIsSessionActive(false);\n    setCurrentVolume(0);\n  };\n\n  const analyzeAudio = () => {\n    if (!analyserRef.current) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    const updateVolume = () => {\n      if (!analyserRef.current) return;\n      \n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      // Calculate average volume\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const average = sum / bufferLength;\n      \n      // Normalize to 0-1 range and smooth it\n      const normalizedVolume = average / 255;\n      setCurrentVolume(normalizedVolume);\n      \n      animationFrameRef.current = requestAnimationFrame(updateVolume);\n    };\n    \n    updateVolume();\n  };\n\n  useEffect(() => {\n    return () => {\n      stopSession();\n    };\n  }, []);\n\n  return {\n    currentVolume,\n    isSessionActive,\n    handleStartStopClick,\n  };\n};\n\nexport default useWebRTCAudioSession;","size_bytes":2627},"client/src/components/WaveformAnimation.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface WaveformAnimationProps {\n  isListening: boolean;\n  audioLevel?: number;\n  isSpeaking?: boolean;\n  isActive?: boolean;\n}\n\nexport function WaveformAnimation({ isListening, audioLevel = 0.5, isSpeaking = false, isActive = true }: WaveformAnimationProps) {\n  const [bars] = useState(() => Array.from({ length: 4 }, (_, i) => i));\n  const [animationTime, setAnimationTime] = useState(0);\n\n  // Update animation time for smooth animations using RAF\n  useEffect(() => {\n    if (!isListening && !isSpeaking) return;\n    \n    let animationId: number;\n    const updateTime = () => {\n      setAnimationTime(Date.now());\n      animationId = requestAnimationFrame(updateTime);\n    };\n    \n    animationId = requestAnimationFrame(updateTime);\n    \n    return () => cancelAnimationFrame(animationId);\n  }, [isListening, isSpeaking]);\n\n  const getBarHeight = (index: number) => {\n    if (!isListening && !isSpeaking) return 32;\n    \n    // Create unique timing for each bar with different frequencies and phases\n    const baseHeight = 32;\n    const maxHeight = isSpeaking ? 90 : 70;\n    \n    // More dramatic movement with different frequencies and phases for each bar\n    const frequencies = [0.015, 0.022, 0.028, 0.018]; // Faster speeds for more movement\n    const phases = [0, 2.1, 4.2, 1.4]; // Different starting points\n    const amplitudes = [0.8, 1.0, 0.9, 1.1]; // Higher intensities for more movement\n    \n    const frequency = frequencies[index % frequencies.length];\n    const phase = phases[index % phases.length];\n    const amplitude = amplitudes[index % amplitudes.length];\n    \n    // Add secondary wave for more natural voice-like movement\n    const primaryWave = Math.sin(animationTime * frequency + phase) * amplitude;\n    const secondaryWave = Math.sin(animationTime * frequency * 1.3 + phase * 0.7) * 0.3;\n    const variation = (primaryWave + secondaryWave) * 0.5 + 0.7;\n    \n    return baseHeight + (maxHeight - baseHeight) * audioLevel * Math.max(0.3, variation);\n  };\n\n  const barVariants = {\n    idle: (index: number) => ({\n      height: 32,\n      backgroundColor: \"hsl(220 8% 65%)\", // Soft gray\n      transition: { \n        duration: 0.5,\n        type: \"spring\",\n        damping: 20,\n        stiffness: 100\n      }\n    }),\n    listening: (index: number) => ({\n      height: getBarHeight(index),\n      backgroundColor: \"hsl(210 60% 70%)\", // Gentle blue\n      transition: {\n        height: {\n          duration: 0.2,\n          ease: \"easeInOut\",\n          type: \"tween\"\n        }\n      }\n    }),\n    speaking: (index: number) => ({\n      height: getBarHeight(index),\n      backgroundColor: \"hsl(210 45% 60%)\", // Professional blue-gray\n      transition: {\n        height: {\n          duration: 0.08 + (index * 0.015), // Faster, more responsive timing\n          ease: \"easeOut\",\n          type: \"tween\"\n        }\n      }\n    })\n  };\n\n  const getAnimationState = () => {\n    if (isSpeaking) return \"speaking\";\n    if (isListening) return \"listening\";\n    return \"idle\";\n  };\n\n  return (\n    <div \n      className={`flex items-center justify-center space-x-2 transition-opacity duration-300 ${\n        isActive ? 'opacity-100' : 'opacity-30'\n      }`}\n      style={{ \n        willChange: 'auto',\n        contain: 'layout',\n        transform: 'translateZ(0)',\n        height: '80px',\n        display: 'flex',\n        alignItems: 'center'\n      }}\n      data-testid=\"waveform-animation\"\n    >\n      {bars.map((index) => (\n        <motion.div\n          key={index}\n          custom={index}\n          variants={barVariants}\n          animate={getAnimationState()}\n          className=\"w-4 rounded-full\"\n          style={{\n            minHeight: 32,\n            maxHeight: 80, // Prevent bars from growing beyond container\n            filter: \"drop-shadow(0 4px 12px rgba(71, 85, 105, 0.25)) drop-shadow(0 0 8px rgba(71, 85, 105, 0.15))\",\n            willChange: 'height',\n            transform: 'translateZ(0)',\n            contain: 'layout'\n          }}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":4093},"client/src/hooks/use-three-tier-tts.tsx":{"content":"import { useState, useCallback } from \"react\";\n\ninterface TTSOptions {\n  onStart?: () => void;\n  onEnd?: () => void;\n  onError?: (error: string) => void;\n  // ElevenLabs parameters\n  voiceId?: string;\n  modelId?: string;\n  stability?: number;\n  similarityBoost?: number;\n  // Cartesia parameters\n  cartesiaModelId?: string;\n  speed?: \"slowest\" | \"slow\" | \"normal\" | \"fast\" | \"fastest\" | number;\n  emotions?: string[];\n  language?: \"en\" | \"fr\" | \"de\" | \"es\" | \"pt\" | \"zh\" | \"ja\" | \"hi\" | \"it\" | \"ko\" | \"nl\" | \"pl\" | \"ru\" | \"sv\" | \"tr\";\n}\n\ninterface UseThreeTierTTSReturn {\n  speak: (text: string, options?: TTSOptions) => Promise<void>;\n  stop: () => void;\n  isSpeaking: boolean;\n  isLoading: boolean;\n}\n\nexport function useThreeTierTTS(): UseThreeTierTTSReturn {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);\n\n  // Female voices for consistency - using user specified voice\n  const VOICES = {\n    hindi: \"iWNf11sz1GrUE4ppxTOL\", // User specified female voice for Hindi\n    english: \"iWNf11sz1GrUE4ppxTOL\", // User specified female voice for English\n  };\n\n  const speak = useCallback(async (text: string, options: TTSOptions = {}) => {\n    console.log('TTS: Starting three-tier speech for:', text.substring(0, 50));\n    \n    // Three-tier system: Cartesia -> ElevenLabs -> Browser Speech API\n    try {\n      setIsLoading(true);\n      \n      // Stop any current audio\n      if (currentAudio) {\n        currentAudio.pause();\n        currentAudio.currentTime = 0;\n      }\n\n      // Try API providers (Cartesia first, then ElevenLabs)\n      try {\n        const voiceId = options.voiceId || VOICES.english;\n\n        const response = await fetch('/api/tts', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            text: text,\n            voiceId: voiceId,\n            // ElevenLabs parameters\n            modelId: options.modelId || \"eleven_multilingual_v2\",\n            stability: options.stability || 0.6,\n            similarityBoost: options.similarityBoost || 0.8,\n            // Cartesia parameters\n            cartesiaModelId: options.cartesiaModelId || \"sonic-2\",\n            speed: options.speed || \"normal\",\n            emotions: options.emotions,\n            language: options.language || \"en\"\n          })\n        });\n\n        if (response.ok) {\n          const audioBlob = await response.blob();\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          \n          const provider = response.headers.get('X-TTS-Provider') || 'unknown';\n          \n          setCurrentAudio(audio);\n          setIsLoading(false);\n          setIsSpeaking(true);\n          \n          console.log(`TTS: ${provider} audio ready, playing...`);\n\n          audio.onplay = () => {\n            console.log(`TTS: ${provider} audio started playing`);\n            options.onStart?.();\n          };\n\n          audio.onended = () => {\n            setIsSpeaking(false);\n            setCurrentAudio(null);\n            URL.revokeObjectURL(audioUrl);\n            console.log(`TTS: ${provider} audio finished`);\n            options.onEnd?.();\n          };\n\n          audio.onerror = () => {\n            setIsSpeaking(false);\n            setIsLoading(false);\n            setCurrentAudio(null);\n            URL.revokeObjectURL(audioUrl);\n            console.error('TTS: Audio playback failed');\n            options.onError?.(\"Audio playback failed\");\n          };\n\n          await audio.play();\n          return; // Success with API provider\n        } else {\n          const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));\n          \n          // Check if we should fallback to browser\n          if (errorData.fallbackToBrowser) {\n            console.log('TTS: API providers unavailable, using browser fallback');\n          } else {\n            throw new Error(errorData.message || `HTTP ${response.status}`);\n          }\n        }\n      } catch (apiError) {\n        console.warn('TTS: API providers failed, falling back to Web Speech API:', apiError instanceof Error ? apiError.message : 'Unknown error');\n      }\n\n      // Fallback to Web Speech API with female voice\n      if ('speechSynthesis' in window) {\n        window.speechSynthesis.cancel();\n        \n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.2; // Higher pitch for more feminine sound\n        utterance.volume = 1.0;\n        utterance.lang = 'en-US';\n        \n        // Try to get a female voice\n        const voices = speechSynthesis.getVoices();\n        const femaleVoice = voices.find(voice => \n          voice.name.toLowerCase().includes('female') ||\n          voice.name.toLowerCase().includes('woman') ||\n          voice.name.toLowerCase().includes('google us english female') ||\n          voice.name.toLowerCase().includes('samantha') ||\n          voice.name.toLowerCase().includes('karen')\n        );\n        \n        if (femaleVoice) {\n          utterance.voice = femaleVoice;\n        }\n        \n        setIsLoading(false);\n        setIsSpeaking(true);\n        \n        utterance.onstart = () => {\n          console.log('TTS: Web Speech API started speaking');\n          options.onStart?.();\n        };\n\n        utterance.onend = () => {\n          setIsSpeaking(false);\n          options.onEnd?.();\n        };\n        \n        utterance.onerror = (event) => {\n          setIsSpeaking(false);\n          setIsLoading(false);\n          options.onError?.(`Speech failed: ${event.error}`);\n        };\n        \n        speechSynthesis.speak(utterance);\n        return;\n      }\n      \n      throw new Error('No speech synthesis available');\n\n    } catch (error) {\n      setIsSpeaking(false);\n      setIsLoading(false);\n      setCurrentAudio(null);\n      console.error('All TTS methods failed:', error);\n      options.onError?.(error instanceof Error ? error.message : \"Speech synthesis failed\");\n    }\n  }, [currentAudio]);\n\n  const stop = useCallback(() => {\n    if (currentAudio) {\n      currentAudio.pause();\n      currentAudio.currentTime = 0;\n      setCurrentAudio(null);\n    }\n    // Stop Web Speech API as well\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n    }\n    setIsSpeaking(false);\n    setIsLoading(false);\n  }, [currentAudio]);\n\n  return {\n    speak,\n    stop,\n    isSpeaking,\n    isLoading,\n  };\n}","size_bytes":6584},"server/pronunciation-corrections.ts":{"content":"/**\n * Pronunciation Corrections for Hindi Words in TTS\n * This file contains word replacements to fix pronunciation issues in Cartesia TTS\n */\n\nexport const pronunciationCorrections: Record<string, string> = {\n  // Fix common Hindi word pronunciation issues\n  \"hai\": \"hain\",\n  \"ke\": \"kے\",\n  \"ke \": \"kay \", // Handle with space\n  \" ke\": \" kay\", // Handle with leading space\n  \" ke \": \" kay \", // Handle with both spaces\n  \n  // Add more corrections as needed\n  // \"word\": \"corrected_pronunciation\"\n};\n\n/**\n * Apply pronunciation corrections to text before sending to TTS\n * @param text - The original text\n * @returns text with pronunciation corrections applied\n */\nexport function applyPronunciationCorrections(text: string): string {\n  let correctedText = text;\n  \n  // Apply word-by-word corrections\n  Object.entries(pronunciationCorrections).forEach(([original, corrected]) => {\n    // Use word boundary regex to match whole words only\n    const regex = new RegExp(`\\\\b${original}\\\\b`, 'gi');\n    correctedText = correctedText.replace(regex, corrected);\n  });\n  \n  return correctedText;\n}\n\n/**\n * Add a new pronunciation correction\n * @param original - The original word that needs correction\n * @param corrected - The corrected pronunciation\n */\nexport function addPronunciationCorrection(original: string, corrected: string): void {\n  pronunciationCorrections[original.toLowerCase()] = corrected;\n}\n\n/**\n * Get all current pronunciation corrections\n * @returns Object containing all corrections\n */\nexport function getPronunciationCorrections(): Record<string, string> {\n  return { ...pronunciationCorrections };\n}","size_bytes":1621}},"version":1}